?dir.create
file.path(dir.create("testdir2",recursive=TRUE),dir.create("testdir3",recursive=TRUE))
dir.create(file.path('testdir1','testdir2'),recursive=TRUE)
dir.create(file.path('testdir2','testdir3'),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10,BY=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("my","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse="")
paste(my_char,collapse=" ")
my_name<-c(my_char,"Marina")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=1,bar=2,norf=NA)
c(foo=1,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","north")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attribute(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-(1:20,4,5)
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE&FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(4,5,10)
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(5,11)
remainder(4,div=2)
library(swirl)
swirl()
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(c(8,4,0)[x],1)
evaluate(function(x){c(8,4,0)[x]},1)
evaluate(function(x){c(8,4,0)[x]},1)
info()
evaluate(function(x){c(8,4,0)["x"]},1)
evaluate(function(x){c(8,4,0)['x']},1)
evaluate(function(x){c(8,4,0)[x]},1)
skip()
evaluate(function(x){x[3]},c(8,4,0))
skip
skip()
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("Swirl","is","creapy")
submit()
submit()
submit()
mad_libs("London","silly","bottom")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
I &p& love &p& R!
"I"&p&"love"&p&"R!"
"I"%p%"love"%p%"R!"
Sys.Date()
info()
main()
main()
x
getwd()
ls()
list()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
for (i in 1:5) {
dat2 <- data.frame()
dat2 <- rbind(dat2, read.csv(files_full[i]))
}
str(dat2)
head(dat2)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}m
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}m
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}m
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
source('~/weightmedian.R')
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
library(swirl)
swirl()
play()
ls()
rm(List=ls())
ls()
rm(list=ls())
info()
nxt()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("This","must","be","simple")
submit()
submit()
submit()
mad_libs("One","two","three")
submit()
I%p%love%p%R!
"I"%p"love"%p%"R!"
"I"%p$"love"%p%"R!"
"I"%p%"love"%p%"R!"
search()
y<-10
source('~/.active-rstudio-document')
f(3)
unclass(as.date("1969-01-01"))
unclass(as.Date("1969-01-01"))
x<-sys.time
x<-Sys.time()
unclass(x)
names(unclass(x))
x
p<-as.POSIXlt(x)
unclass(p)
names(unclass(p))
p[3]
p$mon
p$yday
source('~/.active-rstudio-document')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
rm(x)
rm(y)
rm(g())
source('~/.active-rstudio-document')
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
setwd("specdata")
setwd(specdata)
?setwd
getwd()
ls()
rm(boring_function)
ls()
rm(f)
ls()
rm(%p%)
rm("%p%")
ls()
rm(cube)
rm(g)
rm(mad_libs)
ls()
rm(list(ls()))
list(ls())
rm(list(ls(...)))
rm(p)
rm(my_mean)
rm(evaluate)
rm(telegram)
rm(x)
rm(y)
rm(z)
rm(remainder)
ls()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
Sys.glob("specdata")
x<-Sys.glob(specdata)
?Sys.glob
ls()
ls()
getwd()
?setwd
source('~/.active-rstudio-document')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
1
submit()
source('~/Downloads/corr.R')
source('~/Downloads/complete.R')
source('~/Downloads/polutantmean.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
getwd()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list<-sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric)
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
animate<-tapply(flags$animate,flags$landmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
dl<-Sys.Date()
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17,1986 08:24"
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time>t1
Sys.time()>t1
Sys.time-t1
as.POSIXt(Sys.time())-t1
as.POSIXlt(Sys.time())-t1
as.POSIXct(Sys.time())-t1
as.POSIXct(Sys.time()-t1)
next()
info()
skip()
main()
main()
library(datasets)
data(iris)
?iris
> mean(iris[iris$Species == "virginica",]$Sepal.Length)
mean(iris[iris$Species == "virginica",]$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
setwd("~/ProgrammAssignment2")
read.file(cashmatrix.R)
